{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .SFNS-Regular_wdth_opsz200000_GRAD_wght2580000;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue35;\red255\green255\blue255;\red13\green80\blue209;
\red160\green169\blue180;\red244\green246\blue249;\red91\green100\blue110;\red10\green58\blue158;\red11\green34\blue86;
}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18431;\cssrgb\c100000\c100000\c100000;\cssrgb\c3529\c41176\c85490;
\cssrgb\c68627\c72157\c75686\c20000;\cssrgb\c96471\c97255\c98039;\cssrgb\c43137\c46667\c50588;\cssrgb\c1961\c31373\c68235;\cssrgb\c3922\c18824\c41176;
}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa320\partightenfactor0

\f0\b\fs64 \cf2 \cb3 \expnd0\expndtw0\kerning0
/*\
SKLabelNodePlus\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\fs32 \cf2 \cb3 version 1.2
\f2\b0  This is the repo of the official {\field{\*\fldinst{HYPERLINK "https://github.com/SpriteKitAlliance/SKAToolKit"}}{\fldrslt \cf4 SKAToolKit}} label node. \cb1 \uc0\u8232 \u8232 \cb3 ###The Original SKLabelNode The traditional 
\f3\fs27\fsmilli13600 \cb5 SKLabelNode
\f2\fs32 \cb3  poses many limitations and over the years Sprite Kit developers have been forced to employ clever hacks to use even the most basic effects with text in their applications. For instance, to have multiple lines of text, one would use a label node for each line. To have shadows, developers would initialize a second label node to offset their original. As for setting the anchor point of a label, there simply was no way beyond the limitations of the alignment modes.\cb1 \

\f1\b \cb3 The SKLabelNodePlus does away with these limitations.
\f2\b0  ###Technical Details 
\f1\b Important:
\f2\b0  You must call the label's 
\f3\fs27\fsmilli13600 \cb5 drawLabel
\f2\fs32 \cb3  method whenever you want to display or update the label. \cb1 \uc0\u8232 \cb3 This is related the label's design, which is optimized for performance by using draws to display the label's text. \cb1 \uc0\u8232 \cb3 An initialization will always look similar to:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 SKLabelNodePlus *label;\
\pard\pardeftab720\partightenfactor0
\cf7 //perform initialization and setup\cf2 \
[label \cf8 drawLabel\cf2 ];\
[\cf8 self\cf2  \cf8 addChild:\cf2 label];\
\pard\pardeftab720\sa320\partightenfactor0

\f2\fs32 \cf2 \cb3 \
Another thing to keep in mind is that although you will see all methods and properties of 
\f3\fs27\fsmilli13600 \cb5 SKLabelNode
\f2\fs32 \cb3 , the class 
\f3\fs27\fsmilli13600 \cb5 SKLabelNodePlus
\f2\fs32 \cb3  actually inherits from 
\f3\fs27\fsmilli13600 \cb5 SKSpriteNode
\f2\fs32 \cb3 , thus giving you access to all the methods and properties of sprite nodes as well.\cb1 \
\cb3 ##Functionality\cb1 \
\cb3 ###Multi-line labels With the 
\f3\fs27\fsmilli13600 \cb5 SKLabelNodePlus
\f2\fs32 \cb3  you can now use multi-line text within Sprite Kit. \cb1 \uc0\u8232 
\f1\b \cb3 \\n option:
\f2\b0  Simply write a newline character "\\n" every time you need a new line of text.\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 SKLabelNodePlus *multiLineLabelNode = [SKLabelNodePlus \cf8 labelNodeWithText:\cf9 @"SpriteKit\\nMultiLine\\nLabel!!!"\cf2 ];\
\
multiLineLabelNode.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame));\
multiLineLabelNode.fontSize = \cf8 20\cf2 ;\
[multiLineLabelNode \cf8 drawLabel\cf2 ];\
[\cf8 self\cf2  \cf8 addChild:\cf2 multiLineLabelNode];\
\pard\pardeftab720\sa320\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/DV-GIT-Rep/SKLabelNodePlus/blob/master/Documentation/screenShot4.png"}}{\fldrslt 
\f2\fs32 \cf4 \cb3 }}\pard\pardeftab720\sa320\qc\partightenfactor0

\f2\fs32 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf2 \cb3 labelWidth option:
\f2\b0  If you would like the label node to create a new line automatically after the text reaches a certain width, use the labelWidth property. Specify the width for the label in points, and when texts reaches that width it will word wrap to the next line. ####Line spacing Use the `lineSpacing` property to control distance between lines. ```Objective-C multiLineLabelNode.lineSpacing = 10; ```\cb1 \
\pard\pardeftab720\sa320\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/DV-GIT-Rep/SKLabelNodePlus/blob/master/Documentation/screenShot3.png"}}{\fldrslt \cf4 \cb3 }}\pard\pardeftab720\sa320\qc\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ####Text alignment The properties `verticalAlignmentMode` and `horizontalAlignmentMode` from `SKLabelNode` retain their functionality. These **will not** align multi-line text, as they only give general adjustments to the `anchorPoint`. Instead, use the new `SKLabelNodePlus` property `textAlignmentMode`, which takes values of the type `NSTextAlignment`. \cb1 \
\
\cb3 The possible values are: `NSTextAlignmentLeft`, `NSTextAlignmentRight`, `NSTextAlignmentCenter`, `NSTextAlignmentJustified`, and `NSTextAlignmentNatural`\cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 \cb3 For example\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 multiLineLabelNode.textAlignmentMode = NSTextAlignmentRight;\
\pard\pardeftab720\sa320\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/DV-GIT-Rep/SKLabelNodePlus/blob/master/Documentation/screenShot5.png"}}{\fldrslt 
\f2\fs32 \cf4 \cb3 }}\pard\pardeftab720\sa320\qc\partightenfactor0

\f2\fs32 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ###Text Shadows You can create text with a shadow using `SKLabelNodePlus`. Simply use Apple's existing `NSShadow` class and set the `shadow` property on your label likewise: ```Objective-C NSShadow *myShadow = [NSShadow new]; [myShadow setShadowColor:[UIColor redColor]]; [myShadow setShadowBlurRadius:3.0]; [myShadow setShadowOffset:CGSizeMake(1, 1)];\cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 \cb3 SKLabelNodePlus *shadowLabelNode = [SKLabelNodePlus labelNodeWithText:@"shadow\\nlabel"]; shadowLabelNode.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame)); shadowLabelNode.fontName = @"Futura-Medium"; shadowLabelNode.fontSize = 35; shadowLabelNode.shadow = myShadow; [shadowLabelNode drawLabel]; [self addChild:shadowLabelNode];\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 <p align="center">\
<img src="/Documentation/screenShot1.png"/>\
</p>\
###Sprite Node versatility\
Because `SKLabelNodePlus` is a subclass of `SKSpriteNode`, your label will have its own methods and parameters while retaining the versatility of the sprite node. This gives you *complete freedom and control* over your text and special effects.\
####Anchor point\
You can set the anchor point however you choose with the `anchorPoint` property\
####Textures and actions\
The text of the label itself is a texture, so you can perform any actions that are possible with a sprite node.\
<br>Example:\
```Objective-C\
SKLabelNodePlus *effectLabel = [SKLabelNodePlus labelNodeWithText:@"Le Happy Face"];\
effectLabel.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame));\
effectLabel.fontSize = 35;\
[effectLabel drawLabel];\
[self addChild:effectLabel];\
  \
SKTexture *labelTexture = effectLabel.texture;\
SKTexture *faceTexture = [SKTexture textureWithImageNamed:@"LeHappyFace"];\
SKAction *changeToFace = [SKAction runBlock:^\{\
  effectLabel.xScale = 0.5;\
    effectLabel.yScale = 2.0;\
    effectLabel.anchorPoint = CGPointMake(0.5, 0.3);\
    effectLabel.texture = faceTexture;\
\}];\
SKAction *changeToLabel = [SKAction runBlock:^\{\
    [effectLabel setScale:1.0];\
    effectLabel.anchorPoint = CGPointMake(0.5, 0);\
    effectLabel.texture = labelTexture;\
\}];\
SKAction *keepblinking = [SKAction repeatActionForever:[SKAction sequence:@[changeToFace, [SKAction waitForDuration:0.8],changeToLabel,[SKAction waitForDuration:0.8]]]];\
[effectLabel runAction:keepblinking];\
\pard\pardeftab720\sa320\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/DV-GIT-Rep/SKLabelNodePlus/blob/master/Documentation/happyface.gif"}}{\fldrslt 
\f2\fs32 \cf4 \cb3 }}\pard\pardeftab720\sa320\qc\partightenfactor0

\f2\fs32 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ####Lighting The `SKLabelNodePlus` can also be combined with an `SKLightNode` by using sprite node bitmasks. \cb1 \
\cb3 Example: ```Objective-C SKLabelNodePlus *lightLabel = [SKLabelNodePlus labelNodeWithText:@"Example Lighted Node"]; lightLabel.position = CGPointMake(CGRectGetMidX(self.frame), CGRectGetMidY(self.frame)); lightLabel.fontName = @"Futura-CondensedExtraBold"; lightLabel.fontSize = 35; lightLabel.lightingBitMask = 1; lightLabel.alpha = 0.5; [lightLabel drawLabel]; [self addChild:lightLabel];\cb1 \
\pard\pardeftab720\sa320\partightenfactor0
\cf2 \cb3 SKLightNode *lightNode = [SKLightNode new]; lightNode.categoryBitMask = 1; lightNode.falloff = 0.5; lightNode.ambientColor = [UIColor whiteColor]; lightNode.lightColor = [[UIColor alloc] initWithRed:1.0 green:0.7 blue:0 alpha:1]; lightNode.position = CGPointMake(30, 0); lightNode.enabled = YES; [lightLabel addChild:lightNode];\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs27\fsmilli13600 \cf2 \cb6 <p align="center">\
<img src="/Documentation/screenShot2.png"/>\
</p>\
####Custom shaders\
Custom shaders are compatible with `SKLabelNodePlus`. Use your own shaders with your label nodes!\
##Using SKLabelNodePlus\
###CocoaPods\
coming soon to cocoa pods...\
###Manually importing\
Download this repo and add inside of your XCode project the SKLabelNodePlus.h and SKLabelNodePlus.m files using file > addFiles\
#####For Objective-C:\
Whenever you need to use the label node, simply import at the beginning of the file: `#import "SKLabelNodePlus.h"`\
#####For Swift:\
If after adding the label node implementation and header files XCode prompts to create a bridging header file, click to create and you will be able to use the `SKLabelNodePlus` class everywhere in your project. Make sure that inside of the bridging header there is the import statement `#import "SKLabelNodePlus.h"`.\
<br>If XCode does not automatically create the bridging header, then to manually create it go to file > new > file. Choose to create a header file. Name this file however you would like but make sure to add the phrase `-Bridging-Header` at the end of the name. After creating, add inside of the file the import statement `#import "SKLabelNodePlus.h"`. Then, go to the project settings by clicking on the project name in the left hand project file navigation bar. In Project search in Build Settings for Bridging Header. If you aren't seeing it, make sure you are searching in the All tab and not Basic. Then, double click next to the Objective-C Bridging Header and type in the location of your Bridging Header in the project tree. For example, if you project is named sampleProject and you added the header "sampleHeader-Bridging-Header.h" inside of the main project folder, you would type "sampleProject/sampleHeader-Bridging-Header.h".\
You will now be able to use `SKLabelNodePlus` in your Swift project.\
##Contact\
If you have any questions, suggestions, or just comments, feel free to email me at maksym.kargin@gmail.com\
\
##License\
The MIT License (MIT)\
\
Copyright (c) 2015 Max Kargin\
\
Permission is hereby granted, free of charge, to any person obtaining a copy\
of this software and associated documentation files (the "Software"), to deal\
in the Software without restriction, including without limitation the rights\
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\
copies of the Software, and to permit persons to whom the Software is\
furnished to do so, subject to the following conditions:\
\
The above copyright notice and this permission notice shall be included in all\
copies or substantial portions of the Software.\
\
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\
SOFTWARE.\
\
*/}